// Generated by ReScript, PLEASE EDIT WITH CARE


function makeJustify(position) {
  if (position === "Around") {
    return "justify-around";
  } else if (position === "End") {
    return "justify-end";
  } else if (position === "Start") {
    return "justify-start";
  } else if (position === "Between") {
    return "justify-between";
  } else if (position === "Center") {
    return "justify-center";
  } else {
    return "justify-evenly";
  }
}

function makeAlign(position) {
  if (position === "Around") {
    return "align-around";
  } else if (position === "End") {
    return "align-end";
  } else if (position === "Start") {
    return "align-start";
  } else if (position === "Between") {
    return "align-between";
  } else if (position === "Center") {
    return "align-center";
  } else {
    return "align-evenly";
  }
}

function makeJustifyItems(position) {
  if (position === "Around") {
    return "justify-items-around";
  } else if (position === "End") {
    return "justify-items-end";
  } else if (position === "Start") {
    return "justify-items-start";
  } else if (position === "Between") {
    return "justify-items-between";
  } else if (position === "Center") {
    return "justify-items-center";
  } else {
    return "justify-items-evenly";
  }
}

function makeJustifySelf(self) {
  if (self === "Baseline") {
    return "justify-self-baseline";
  } else if (self === "End") {
    return "justify-self-end";
  } else if (self === "Start") {
    return "justify-self-start";
  } else if (self === "Auto") {
    return "justify-self-auto";
  } else if (self === "Center") {
    return "justify-self-center";
  } else {
    return "justify-self-stretch";
  }
}

function makeAlignSelf(self) {
  if (self === "Baseline") {
    return "align-self-baseline";
  } else if (self === "End") {
    return "align-self-end";
  } else if (self === "Start") {
    return "align-self-start";
  } else if (self === "Auto") {
    return "align-self-auto";
  } else if (self === "Center") {
    return "align-self-center";
  } else {
    return "align-self-stretch";
  }
}

function makePlaceContent(place) {
  if (place === "Evenly") {
    return "place-content-evenly";
  } else if (place === "Around") {
    return "place-content-around";
  } else if (place === "End") {
    return "place-content-end";
  } else if (place === "Start") {
    return "place-content-start";
  } else if (place === "Between") {
    return "place-content-between";
  } else if (place === "Center") {
    return "place-content-center";
  } else {
    return "place-content-stretch";
  }
}

function makePlaceSelf(gridSelf) {
  if (gridSelf === "End") {
    return "place-self-end";
  } else if (gridSelf === "Start") {
    return "place-self-start";
  } else if (gridSelf === "Auto") {
    return "place-self-auto";
  } else if (gridSelf === "Center") {
    return "place-self-center";
  } else {
    return "place-self-stretch";
  }
}

function makeGridTempCol(gridCol) {
  if (gridCol === 2) {
    return "grid-cols-2";
  } else if (gridCol === 3) {
    return "grid-cols-3";
  } else if (gridCol === 4) {
    return "grid-cols-4";
  } else if (gridCol === 5) {
    return "grid-cols-5";
  } else if (gridCol === 6) {
    return "grid-cols-6";
  } else if (gridCol === 7) {
    return "grid-cols-7";
  } else if (gridCol === 8) {
    return "grid-cols-8";
  } else if (gridCol === 9) {
    return "grid-cols-9";
  } else if (gridCol === 10) {
    return "grid-cols-10";
  } else if (gridCol === 11) {
    return "grid-cols-11";
  } else if (gridCol === 12) {
    return "grid-cols-12";
  } else if (gridCol === "None") {
    return "grid-cols-none";
  } else {
    return "grid-cols-1";
  }
}

function makeGridTempRow(gridRow) {
  if (gridRow === 2) {
    return "grid-rows-2";
  } else if (gridRow === 3) {
    return "grid-rows-3";
  } else if (gridRow === 4) {
    return "grid-rows-4";
  } else if (gridRow === 5) {
    return "grid-rows-5";
  } else if (gridRow === 6) {
    return "grid-rows-6";
  } else if (gridRow === "None") {
    return "grid-rows-none";
  } else {
    return "grid-rows-1";
  }
}

var flex = "flex";

var flexCol = "flex-col";

var flexColReverse = "flex-col-reverse";

var flexNone = "flex-none";

var flexRow = "flex-row";

var flexRowReverse = "flex-row-reverse";

var grid = "grid";

var inlineFlex = "inline-flex";

export {
  flex ,
  flexCol ,
  flexColReverse ,
  flexNone ,
  flexRow ,
  flexRowReverse ,
  grid ,
  inlineFlex ,
  makeJustify ,
  makeAlign ,
  makeJustifyItems ,
  makeJustifySelf ,
  makeAlignSelf ,
  makePlaceContent ,
  makePlaceSelf ,
  makeGridTempCol ,
  makeGridTempRow ,
  
}
/* No side effect */
